// pages/imperium-assessment.js

import { useState, useEffect, useRef } from 'react';
import Image from 'next/image';
import LikertStatement from '../components/LikertStatement';
import ImperiumReport from '../components/ImperiumReport';
import jsPDF from 'jspdf';
// We have REMOVED 'import html2canvas from 'html2canvas';' from the top of the file.

const apiUrl = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3001';

const ImperiumAssessmentPage = () => {
    const [assessmentState, setAssessmentState] = useState('loading');
    const [statements, setStatements] = useState([]);
    const [answers, setAnswers] = useState({});
    const [jobId, setJobId] = useState(null);
    const [report, setReport] = useState(null);
    const [isDownloading, setIsDownloading] = useState(false);
    const reportRef = useRef();

    // Fetch statements on initial load
    useEffect(() => {
        const fetchStatements = async () => {
            try {
                const res = await fetch(`${apiUrl}/api/imperium/statements`);
                if (!res.ok) throw new Error(`Server responded with ${res.status}`);
                const data = await res.json();
                setStatements(data);
                setAssessmentState('in_progress');
            } catch (error) {
                console.error("Failed to fetch statements:", error);
                setAssessmentState('error');
            }
        };
        fetchStatements();
    }, []);

    // Poll for the report status once a job ID is available
    useEffect(() => {
        if (!jobId) return;
        const intervalId = setInterval(async () => {
            try {
                const res = await fetch(`${apiUrl}/api/imperium/status/${jobId}`);
                if (!res.ok) throw new Error(`Status check failed`);
                const data = await res.json();
                if (data.status === 'completed') {
                    clearInterval(intervalId);
                    setReport(data.report);
                    setAssessmentState('completed');
                } else if (data.status === 'failed') {
                    clearInterval(intervalId);
                    setAssessmentState('error');
                }
            } catch (error) {
                console.error("Error polling for report status:", error);
                setAssessmentState('error');
                clearInterval(intervalId);
            }
        }, 5000);
        return () => clearInterval(intervalId);
    }, [jobId]);

    const handleAnswerSelect = (statementId, value) => {
        setAnswers(prevAnswers => ({ ...prevAnswers, [statementId]: value }));
    };

    const handleSubmit = async () => {
        setAssessmentState('evaluating');
        try {
            const res = await fetch(`${apiUrl}/api/imperium/submit`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ answers })
            });
            if (!res.ok) throw new Error(`Submit request failed`);
            const data = await res.json();
            if (data.jobId) {
                setJobId(data.jobId);
            } else {
                throw new Error("Did not receive a job ID from the server.");
            }
        } catch (error) {
            console.error("Failed to submit assessment:", error);
            setAssessmentState('error');
        }
    };

    // --- THIS IS THE CORRECTED PDF DOWNLOAD FUNCTION ---
    const handleDownloadPdf = async () => {
        setIsDownloading(true);
        const reportElement = reportRef.current;
        if (!reportElement) {
            setIsDownloading(false);
            return;
        }

        // DYNAMIC IMPORT: This line ensures html2canvas is only loaded in the browser.
        const html2canvas = (await import('html2canvas')).default;

        const canvas = await html2canvas(reportElement, { scale: 2, useCORS: true });
        const imgData = canvas.toDataURL('image/png');
        const pdf = new jsPDF('p', 'mm', 'a4', true);
        const pdfWidth = pdf.internal.pageSize.getWidth();
        const pdfHeight = pdf.internal.pageSize.getHeight();
        const imgWidth = pdfWidth;
        const imgHeight = (canvas.height * imgWidth) / canvas.width;
        let heightLeft = imgHeight;
        let position = 0;

        pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight, undefined, 'FAST');
        heightLeft -= pdfHeight;

        while (heightLeft > 0) {
            position = heightLeft - imgHeight;
            pdf.addPage();
            pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight, undefined, 'FAST');
            heightLeft -= pdfHeight;
        }

        pdf.save('Imperium_Leadership_Index_Report.pdf');
        setIsDownloading(false);
    };

    const totalQuestions = statements.length;
    const answeredQuestions = Object.keys(answers).length;
    const isSubmitDisabled = answeredQuestions < totalQuestions;

    // --- Conditional Rendering ---

    if (assessmentState === 'loading') {
        return <div style={{ padding: '40px', textAlign: 'center' }}>Loading Imperium Leadership Index™...</div>;
    }
    if (assessmentState === 'error') {
        return <div style={{ padding: '40px', textAlign: 'center', color: 'red' }}><h2>An Error Occurred</h2><p>Could not load the assessment or generate the report. Please refresh and try again.</p></div>;
    }
    if (assessmentState === 'evaluating') {
        return (
            <div style={{ padding: '20px', textAlign: 'center', height: '100vh', display: 'flex', flexDirection: 'column', justifyContent: 'center' }}>
                <h2>Thank you. Your submission is being analyzed.</h2>
                <p>Your personalized Imperium Leadership Index™ report is being generated by our AI. This may take a few moments.</p>
                <p>Please keep this page open.</p>
                <div style={{ marginTop: '30px' }}>
                    <div className="spinner"></div>
                    <p style={{ marginTop: '10px' }}>Generating insights...</p>
                </div>
                <style jsx>{`.spinner { border: 4px solid #f3f3f3; border-top: 4px solid #003366; border-radius: 50%; width: 36px; height: 36px; animation: spin 1s linear infinite; margin: auto; } @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }`}</style>
            </div>
        );
    }
    if (assessmentState === 'completed' && report) {
        return (
            <div style={{ maxWidth: '1000px', margin: 'auto', padding: '20px', backgroundColor: '#f4f4f4' }}>
                <div style={{ textAlign: 'center', marginBottom: '20px', padding: '20px', backgroundColor: 'white', borderRadius: '8px', boxShadow: '0 2px 5px rgba(0,0,0,0.1)' }}>
                    <h2 style={{ color: '#003366' }}>Your Report is Ready</h2>
                    <p>You can download a high-quality PDF copy of your personalized report below.</p>
                    <button onClick={handleDownloadPdf} disabled={isDownloading} style={{ padding: '12px 25px', fontSize: '1.1em', cursor: 'pointer', backgroundColor: '#007bff', color: 'white', border: 'none', borderRadius: '5px' }}>
                        {isDownloading ? 'Generating PDF...' : 'Download Report as PDF'}
                    </button>
                </div>
                <ImperiumReport ref={reportRef} report={report} />
            </div>
        );
    }

    return (
        <div style={{ fontFamily: 'Arial, sans-serif', maxWidth: '900px', margin: 'auto', padding: '20px', backgroundColor: 'white', color: 'black' }}>
            <header style={{ textAlign: 'center', borderBottom: '1px solid #eee', paddingBottom: '20px', marginBottom: '30px' }}>
                <Image src="/logo.png" alt="Company Logo" width={180} height={72} />
                <h1 style={{ color: '#003366', marginTop: '10px' }}>The Imperium Leadership Index™</h1>
                <p style={{ fontStyle: 'italic', color: '#555' }}>Please respond to the following statements based on your leadership approach.</p>
            </header>
            <main>
                {statements.map(statement => (
                    <LikertStatement key={statement.id} statement={statement} currentAnswer={answers[statement.id]} onAnswerSelect={handleAnswerSelect} />
                ))}
            </main>
            <footer style={{ position: 'sticky', bottom: 0, backgroundColor: 'rgba(255, 255, 255, 0.95)', padding: '20px', borderTop: '1px solid #eee', textAlign: 'center', boxShadow: '0 -2px 10px rgba(0,0,0,0.1)' }}>
                <p style={{ margin: '0 0 15px 0', fontWeight: 'bold' }}>Progress: {answeredQuestions} / {totalQuestions}</p>
                <button onClick={handleSubmit} disabled={isSubmitDisabled} style={{ padding: '15px 40px', fontSize: '1.2em', fontWeight: 'bold', cursor: isSubmitDisabled ? 'not-allowed' : 'pointer', backgroundColor: isSubmitDisabled ? '#ccc' : '#28a745', color: 'white', border: 'none', borderRadius: '5px', opacity: isSubmitDisabled ? 0.6 : 1 }}>
                    Submit for Analysis
                </button>
            </footer>
        </div>
    );
};

export default ImperiumAssessmentPage;